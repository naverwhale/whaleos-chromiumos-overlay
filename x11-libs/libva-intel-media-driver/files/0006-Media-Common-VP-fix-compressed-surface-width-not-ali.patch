From 973d8a76d5d8dad95dd2e6ab7ad6065054b474f9 Mon Sep 17 00:00:00 2001
From: Cai_Jianxing <jianxing.cai@intel.com>
Date: Thu, 3 Aug 2023 12:45:52 +0800
Subject: [PATCH] [Media Common] [VP] fix compressed surface width not align
 with 32 and seg fault

fix compressed surface width not align with 32 and seg fault caused by wrong plane number passed to gmm
---
 .../vp/hal/vphal_render_vebox_memdecomp.cpp   | 28 +++++++++++++++++++
 media_driver/linux/common/ddi/media_libva.cpp |  2 +-
 .../linux/common/ddi/media_libva_util.cpp     |  7 ++---
 3 files changed, 32 insertions(+), 5 deletions(-)

diff --git a/media_driver/agnostic/common/vp/hal/vphal_render_vebox_memdecomp.cpp b/media_driver/agnostic/common/vp/hal/vphal_render_vebox_memdecomp.cpp
index 140be9b30..799221530 100644
--- a/media_driver/agnostic/common/vp/hal/vphal_render_vebox_memdecomp.cpp
+++ b/media_driver/agnostic/common/vp/hal/vphal_render_vebox_memdecomp.cpp
@@ -29,6 +29,8 @@
 #include "vphal_debug.h"
 #include "vp_utils.h"
 
+#define DECOMPRESSION_WIDTH_ALIGNMENT_IN_BYTE 32
+
 MediaVeboxDecompState::MediaVeboxDecompState():
     MediaMemDecompBaseState(),
     m_osInterface(nullptr),
@@ -636,7 +638,33 @@ MOS_STATUS MediaVeboxDecompState::GetResourceInfo(PMOS_SURFACE surface)
         &resDetails));
 
     surface->Format                                             = resDetails.Format;
+#if defined(LINUX) && !defined(WDDM_LINUX)
+    if ((surface->Format == Format_NV12 || surface->Format == Format_P010) && surface->OsResource.iWidth & 1 != 0)
+    {
+        uint32_t bitsPerPixel = 8;
+        if (surface->Format == Format_P010)
+        {
+            bitsPerPixel = 16;
+        }
+
+        uint32_t alignWidth = MOS_ALIGN_CEIL(resDetails.dwWidth, DECOMPRESSION_WIDTH_ALIGNMENT_IN_BYTE*8/bitsPerPixel);
+        if (alignWidth <= resDetails.dwPitch*8/bitsPerPixel)
+        {
+            surface->dwWidth = alignWidth;
+        }
+        else
+        {
+            VPHAL_MEMORY_DECOMP_ASSERTMESSAGE("May got green line corruption.");
+            surface->dwWidth = resDetails.dwWidth;
+        }
+    }
+    else
+    {
+        surface->dwWidth                                        = resDetails.dwWidth;
+    }
+#else
     surface->dwWidth                                            = resDetails.dwWidth;
+#endif
     surface->dwHeight                                           = resDetails.dwHeight;
     surface->dwPitch                                            = resDetails.dwPitch;
     surface->dwDepth                                            = resDetails.dwDepth;
diff --git a/media_driver/linux/common/ddi/media_libva.cpp b/media_driver/linux/common/ddi/media_libva.cpp
index c690106af..0038fde95 100755
--- a/media_driver/linux/common/ddi/media_libva.cpp
+++ b/media_driver/linux/common/ddi/media_libva.cpp
@@ -5171,7 +5171,7 @@ VAStatus SwizzleSurface(PDDI_MEDIA_CONTEXT mediaCtx, PGMM_RESOURCE_INFO pGmmResI
 
     memset(&gmmResCopyBlt, 0x0, sizeof(GMM_RES_COPY_BLT));
     uiPicHeight = pGmmResInfo->GetBaseHeight();
-    uiSize = pGmmResInfo->GetSizeSurface();
+    uiSize = pGmmResInfo->GetSizeMainSurface();
     uiPitch = pGmmResInfo->GetRenderPitch();
     gmmResCopyBlt.Gpu.pData = pLockedAddr;
     gmmResCopyBlt.Sys.pData = pResourceBase;
diff --git a/media_driver/linux/common/ddi/media_libva_util.cpp b/media_driver/linux/common/ddi/media_libva_util.cpp
index eaf31274f..6d42bf42f 100755
--- a/media_driver/linux/common/ddi/media_libva_util.cpp
+++ b/media_driver/linux/common/ddi/media_libva_util.cpp
@@ -523,14 +523,13 @@ VAStatus DdiMediaUtil_AllocateSurface(
                 gmmCustomParams.Flags.Info.Linear = true;
         }
 
-        uint32_t uiPlanesOrAuxPlanes = mediaSurface->pSurfDesc->uiPlanes;
         if(bMemCompEnable)
         {
-            uiPlanesOrAuxPlanes = mediaSurface->pSurfDesc->uiPlanes/2;
             gmmCustomParams.AuxSurf.BaseAlignment = {0};
-            gmmCustomParams.Size = (uiPlanesOrAuxPlanes == 1) ? mediaSurface->pSurfDesc->uiOffsets[1]:mediaSurface->pSurfDesc->uiOffsets[2];
+            gmmCustomParams.NoOfPlanes = mediaSurface->pSurfDesc->uiPlanes/2;
+            gmmCustomParams.Size = (gmmCustomParams.NoOfPlanes == 1) ? mediaSurface->pSurfDesc->uiOffsets[1]:mediaSurface->pSurfDesc->uiOffsets[2];
         }
-        switch(uiPlanesOrAuxPlanes)
+        switch(gmmCustomParams.NoOfPlanes)
         {
             case 1:
                 gmmCustomParams.PlaneOffset.X[GMM_PLANE_Y] = 0;
-- 
2.25.1

