commit bb6d5fc205d2931dce179e7f03cf35de801c2f7a
Author: Joel E. Denny <jdenny.ornl@gmail.com>
Date:   Thu Sep 7 12:34:59 2023 -0400

    Revert "[lit] Improve test output from lit's internal shell"
    
    This reverts commit c981c533055e14302e7bff5d6898c9308065f665.
    
    The reason for the revert is discussed at:
    https://discourse.llvm.org/t/rfc-improving-lits-debug-output/72839/52

diff --git a/libcxx/utils/libcxx/test/dsl.py b/libcxx/utils/libcxx/test/dsl.py
index 4c2217ec3142..847cebf5962f 100644
--- a/libcxx/utils/libcxx/test/dsl.py
+++ b/libcxx/utils/libcxx/test/dsl.py
@@ -180,7 +180,7 @@ def programOutput(config, program, args=None):
                 "Failed to run program, cmd:\n{}\nstderr is:\n{}".format(runcmd, err)
             )
 
-        return out
+        return libcxx.test.format._parseLitOutput(out)
 
 
 @_memoizeExpensiveOperation(
diff --git a/libcxx/utils/libcxx/test/format.py b/libcxx/utils/libcxx/test/format.py
index 2be42d293280..ddd88f25646e 100644
--- a/libcxx/utils/libcxx/test/format.py
+++ b/libcxx/utils/libcxx/test/format.py
@@ -35,6 +35,39 @@ def _checkBaseSubstitutions(substitutions):
     for s in ["%{cxx}", "%{compile_flags}", "%{link_flags}", "%{flags}", "%{exec}"]:
         assert s in substitutions, "Required substitution {} was not provided".format(s)
 
+def _parseLitOutput(fullOutput):
+    """
+    Parse output of a Lit ShTest to extract the actual output of the contained commands.
+
+    This takes output of the form
+
+        $ ":" "RUN: at line 11"
+        $ "echo" "OUTPUT1"
+        # command output:
+        OUTPUT1
+
+        $ ":" "RUN: at line 12"
+        $ "echo" "OUTPUT2"
+        # command output:
+        OUTPUT2
+
+    and returns a string containing
+
+        OUTPUT1
+        OUTPUT2
+
+    as-if the commands had been run directly. This is a workaround for the fact
+    that Lit doesn't let us execute ShTest and retrieve the raw output without
+    injecting additional Lit output around it.
+    """
+    parsed = ''
+    for output in re.split('[$]\s*":"\s*"RUN: at line \d+"', fullOutput):
+        if output: # skip blank lines
+            commandOutput = re.search("# command output:\n(.+)\n$", output, flags=re.DOTALL)
+            if commandOutput:
+                parsed += commandOutput.group(1)
+    return parsed
+
 def _executeScriptInternal(test, litConfig, commands):
     """
     Returns (stdout, stderr, exitCode, timeoutInfo, parsedCommands)
@@ -46,12 +79,21 @@ def _executeScriptInternal(test, litConfig, commands):
     _, tmpBase = _getTempPaths(test)
     execDir = os.path.dirname(test.getExecPath())
     res = lit.TestRunner.executeScriptInternal(
-        test, litConfig, tmpBase, parsedCommands, execDir, debug=False
+        test, litConfig, tmpBase, parsedCommands, execDir
     )
     if isinstance(res, lit.Test.Result):  # Handle failure to parse the Lit test
         res = ("", res.output, 127, None)
     (out, err, exitCode, timeoutInfo) = res
 
+    # TODO: As a temporary workaround until https://reviews.llvm.org/D81892 lands, manually
+    #       split any stderr output that is included in stdout. It shouldn't be there, but
+    #       the Lit internal shell conflates stderr and stdout.
+    conflatedErrorOutput = re.search("(# command stderr:.+$)", out, flags=re.DOTALL)
+    if conflatedErrorOutput:
+        conflatedErrorOutput = conflatedErrorOutput.group(0)
+        out = out[: -len(conflatedErrorOutput)]
+        err += conflatedErrorOutput
+
     return (out, err, exitCode, timeoutInfo, parsedCommands)
 
 
@@ -358,7 +400,8 @@ class CxxStandardLibraryTest(lit.formats.FileBasedTest):
             raise RuntimeError(f"Error while trying to generate gen test\nstdout:\n{out}\n\nstderr:\n{err}")
 
         # Split the generated output into multiple files and generate one test for each file
-        for (subfile, content) in self._splitFile(out):
+        parsed = _parseLitOutput(out)
+        for (subfile, content) in self._splitFile(parsed):
             generatedFile = testSuite.getExecPath(pathInSuite + (subfile, ))
             os.makedirs(os.path.dirname(generatedFile), exist_ok=True)
             with open(generatedFile, 'w') as f:
