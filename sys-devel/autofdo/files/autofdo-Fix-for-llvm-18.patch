diff --git a/llvm_propeller_cfg.cc b/llvm_propeller_cfg.cc
index 33e9a38..05aa6bd 100644
--- a/llvm_propeller_cfg.cc
+++ b/llvm_propeller_cfg.cc
@@ -29,9 +29,9 @@ void ControlFlowGraph::CreateNodes(
         /*symbol_ordinal=*/ordinal++,
         /*addr=*/func_bb_addr_map.Addr + bb_entry.Offset,
         /*bb_index=*/bb_index++,
-        /*size=*/bb_entry.Size, /*is_landing_pad=*/bb_entry.IsEHPad,
+        /*size=*/bb_entry.Size, /*is_landing_pad=*/bb_entry.MD.IsEHPad,
         /*cfg=*/this));
-    if (bb_entry.IsEHPad) ++n_landing_pads_;
+    if (bb_entry.MD.IsEHPad) ++n_landing_pads_;
   }
 }
 
diff --git a/llvm_propeller_whole_program_info.cc b/llvm_propeller_whole_program_info.cc
index ec5270d..064fff5 100644
--- a/llvm_propeller_whole_program_info.cc
+++ b/llvm_propeller_whole_program_info.cc
@@ -30,7 +30,6 @@
 #include "third_party/abseil/absl/status/statusor.h"
 #include "third_party/abseil/absl/strings/str_format.h"
 #include "third_party/abseil/absl/strings/string_view.h"
-#include "llvm/ADT/Optional.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/BinaryFormat/ELF.h"
 #include "llvm/Object/ELFObjectFile.h"
@@ -400,7 +399,7 @@ bool PropellerWholeProgramInfo::CreateEdges(
     // of a basic block for returns.
     // We also account for returns from external library functions which happen
     // when from_sym is null.
-    if ((!from_bb_index.has_value() || GetBBEntry(from_bb_handle).HasReturn ||
+    if ((!from_bb_index.has_value() || GetBBEntry(from_bb_handle).MD.HasReturn ||
          to_bb_handle.function_index != from_bb_handle.function_index) &&
         GetFunctionEntry(to_bb_handle).Addr != to &&  // Not a call
         // Jump to the beginning of the basicblock
@@ -417,7 +416,7 @@ bool PropellerWholeProgramInfo::CreateEdges(
       }
     }
     if (!from_bb_index.has_value()) continue;
-    if (!GetBBEntry(from_bb_handle).HasReturn &&
+    if (!GetBBEntry(from_bb_handle).MD.HasReturn &&
         GetAddress(to_bb_handle) != to) {
       // Jump is not a return and its target is not the beginning of a function
       // or a basic block.
@@ -428,7 +427,7 @@ bool PropellerWholeProgramInfo::CreateEdges(
     if (GetFunctionEntry(to_bb_handle).Addr == to) {
       edge_kind = CFGEdge::Kind::kCall;
     } else if (to != GetAddress(to_bb_handle) ||
-               GetBBEntry(from_bb_handle).HasReturn) {
+               GetBBEntry(from_bb_handle).MD.HasReturn) {
       edge_kind = CFGEdge::Kind::kRet;
     }
     InternalCreateEdge(from_bb_index.value(), to_bb_index.value(), weight,
@@ -511,7 +510,7 @@ bool PropellerWholeProgramInfo::CanFallThrough(int from, int to) {
                     "larger than end address. ***";
     return false;
   }
-  if (!GetBBEntry(from_bb).CanFallThrough) {
+  if (!GetBBEntry(from_bb).MD.CanFallThrough) {
     LOG(WARNING) << "*** Skipping non-fallthrough ***" << GetName(from_bb);
     return false;
   }
@@ -529,7 +528,7 @@ bool PropellerWholeProgramInfo::CanFallThrough(int from, int to) {
     // the fallthrough path if any intermediate block (except the destination
     // block) does not fall through (source block is checked before entering
     // this loop).
-    if (!GetBBEntry(bb_sym).CanFallThrough) {
+    if (!GetBBEntry(bb_sym).MD.CanFallThrough) {
       LOG(WARNING) << "*** Skipping non-fallthrough ***" << GetName(bb_sym);
       return false;
     }
diff --git a/perfdata_reader.cc b/perfdata_reader.cc
index 7d95b2d..7f2e464 100644
--- a/perfdata_reader.cc
+++ b/perfdata_reader.cc
@@ -58,7 +58,7 @@ std::string ELFFileUtil<ELFT>::GetBuildId() {
     for (const typename ELFT::Note &note : elf_file_->notes(shdr, err)) {
       llvm::StringRef r = note.getName();
       if (r == kBuildIdNoteName) {
-        llvm::ArrayRef<uint8_t> build_id = note.getDesc();
+        llvm::ArrayRef<uint8_t> build_id = note.getDesc(/*Align=*/0);
         std::string build_id_str(build_id.size() * 2, '0');
         int k = 0;
         for (uint8_t t : build_id) {
